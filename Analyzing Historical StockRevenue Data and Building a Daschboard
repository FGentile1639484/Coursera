#this is a Python Code
import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots

def make_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing = .3)
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data.Date), y=stock_data.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data.Date), y=revenue_data.Revenue, name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    #fig.update_yaxes(autorange="reversed", row=2, col=1)
    fig.update_layout(showlegend=False,
                      height=900,
                      title=stock,
                      xaxis_rangeslider_visible=True)
    fig.show()

#Question 1 - Extracting Tesla Stock Data Using yfinance
tesla = yf.Ticker("TSLA")
tesla_data = tesla.history(period="max")

tesla_data.reset_index(inplace=True)
tesla_data.head()

#Question 2 - Extracting Tesla Revenue Data Using Webscraping
url= "https://web.archive.org/web/20240225192412/https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue"
html_data=requests.get(url, proxies=None).text
soup = BeautifulSoup(html_data,"html5lib")
table = soup.find('table') # in html table is represented by the tag <table>
tables = soup.find_all('table')

tesla_revenue = pd.DataFrame(columns=['Date','Revenue'])

for row in tables[1].tbody.find_all("tr"):
    col = row.find_all("td")
    if (col != []):
        date = col[0].text
        revenue = col[1].text
        tesla_revenue = pd.concat([tesla_revenue, pd.DataFrame.from_dict({'Date': [date], 'Revenue': [revenue]})], ignore_index=True)
tesla_revenue

tesla_revenue.loc[:, "Revenue"] = tesla_revenue['Revenue'].str.replace(',', '')
import re
tesla_revenue.loc[:, 'Revenue'] = tesla_revenue['Revenue'].str.replace(r'[\$,]', '', regex=True)
#tesla_revenue.loc[:, 'Revenue'] = tesla_revenue['Revenue'].map(int)
# Convert to numeric, handling non-numeric values by converting them to NaN
tesla_revenue['Revenue'] = pd.to_numeric(tesla_revenue['Revenue'], errors='coerce')
tesla_revenue = tesla_revenue.dropna()
tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]
tesla_revenue

#Question 5 - Tesla Stock and Revenue Dashboard
make_graph(tesla_data[['Date','Close']], tesla_revenue, 'Tesla')

#Question 3 - Extracting GameStop Stock Data Using yfinance
gme = yf.Ticker('GME')
gme_data = gme.history(period='max')
gme_data.reset_index(inplace=True)
gme_data.head()
#Question 4 - Extracting GameStop Revenue Data Using Webscraping
url = 'https://web.archive.org/web/20230512141446/https://www.macrotrends.net/stocks/charts/GME/gamestop/revenue'
html_data = requests.get(url).text
soup = BeautifulSoup(html_data,"html5lib")
table = soup.find('table') # in html table is represented by the tag <table>
tables = soup.find_all('table')
gme_revenue = pd.DataFrame(columns=['Date','Revenue'])

for row in tables[1].tbody.find_all("tr"):
    col = row.find_all("td")
    if (col != []):
        date = col[0].text
        revenue = col[1].text
        gme_revenue = pd.concat([gme_revenue, pd.DataFrame.from_dict({'Date': [date], 'Revenue': [revenue]})], ignore_index=True)
        gme_revenue.reset_index(drop=True, inplace=True)
gme_revenue

gme_revenue.loc[:, "Revenue"] = gme_revenue['Revenue'].str.replace(',', '')
gme_revenue.loc[:, 'Revenue'] = gme_revenue['Revenue'].str.replace(r'[\$,]', '', regex=True)
#gme_revenue.loc[:, 'Revenue'] = gme_revenue['Revenue'].map(float)
gme_revenue['Revenue'] = pd.to_numeric(gme_revenue['Revenue'], errors='coerce')
gme_revenue.dropna(inplace=True)
gme_revenue = gme_revenue[gme_revenue['Revenue'] != ""]
gme_revenue
#Question 6 - GameStop Stock and Revenue Dashboard
make_graph(gme_data[['Date','Close']], gme_revenue, 'GameStop')
